import unittest
from nfa_converter.automaton import *


class AutomatonTest(unittest.TestCase):
    def test_create_dfa(self):
        dfa = Automaton("DFA")
        dfa.add_state("1")
        dfa.add_state("2")
        dfa.add_state("3")
        dfa.set_start_state("1")
        dfa.set_final_states({"3"})
        dfa.add_transition("1", "2", "a")
        dfa.add_transition("1", "3", "b")
        dfa.add_transition("2", "3", "a")
        dfa.add_transition("2", "3", "b")
        self.assertSetEqual(dfa.get_states(), {"1", "2", "3"})
        self.assertEqual(dfa.get_start_state(), "1")
        self.assertSetEqual(dfa.get_final_states(), {"3"})
        self.assertDictEqual(dfa.get_transitions_from("1"), {"a": {"2"}, "b": {"3"}})
        self.assertDictEqual(dfa.get_transitions_from("2"), {"a": {"3"}, "b": {"3"}})
        self.assertEqual(dfa.get_type(), AutomatonType.DFA)

    def test_create_nfa(self):
        dfa = Automaton("NFA")
        dfa.add_state("1")
        dfa.add_state("2")
        dfa.add_state("3")
        dfa.add_state("4")
        dfa.set_start_state("1")
        dfa.set_final_states({"3", "4"})
        dfa.add_transition("1", "2", "a")
        dfa.add_transition("1", "3", "a")
        dfa.add_transition("2", "3", "a")
        dfa.add_transition("2", "3", "b")
        dfa.add_transition("3", "4", "b")
        self.assertSetEqual(dfa.get_states(), {"1", "2", "3", "4"})
        self.assertEqual(dfa.get_start_state(), "1")
        self.assertSetEqual(dfa.get_final_states(), {"3", "4"})
        self.assertDictEqual(dfa.get_transitions_from("1"), {"a": {"2", "3"}})
        self.assertEqual(dfa.get_type(), AutomatonType.NFA)

    def test_create_enfa(self):
        dfa = Automaton("eNFA")
        dfa.add_state("1")
        dfa.add_state("2")
        dfa.add_state("3")
        dfa.add_state("4")
        dfa.set_start_state("1")
        dfa.set_final_states({"3", "4"})
        dfa.add_transition("1", "2", "a")
        dfa.add_transition("1", "3", "a")
        dfa.add_transition("2", "3", "a")
        dfa.add_transition("2", "3", "b")
        dfa.add_transition("3", "4", "b")
        dfa.add_transition("1", "4", "ε")
        self.assertSetEqual(dfa.get_states(), {"1", "2", "3", "4"})
        self.assertEqual(dfa.get_start_state(), "1")
        self.assertSetEqual(dfa.get_final_states(), {"3", "4"})
        self.assertDictEqual(dfa.get_transitions_from("1"), {"a": {"2", "3"}, "ε": {"4"}})
        self.assertEqual(dfa.get_type(), AutomatonType.eNFA)
